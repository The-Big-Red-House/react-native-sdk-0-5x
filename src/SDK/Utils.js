/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import crypto from 'crypto-js';
import { InvalidTypeException } from '../common/exceptions/invalid-type.exception';
import { PropertyRequiredException } from '../common/exceptions/property-required.exception';
import { UnexpectedException } from '../common/exceptions/unexpected.exception';

/**
 * The Utils SDK module.
 * @module SDK/Utils
 * @version 1.1.0
 */

/**
 * It takes a string, converts it to Base64, replaces the + and / characters with - and _ respectively,
 * and removes the = character
 * @param str - The string to encode.
 * @returns A string that is the base64 encoding of the input string.
 */
const base64URLEncode = (str) => {
    return str
        .toString(crypto.enc.Base64)
        .replace(/\+/g, '-')
        .replace(/\//g, '_')
        .replace(/=/g, '');
};

/**
 * It takes a string and returns a string
 * @param buffer - The buffer to hash.
 * @returns The SHA256 hash of the buffer.
 */
const sha256 = (buffer) => {
    return crypto.SHA256(buffer).toString(crypto.enc.Base64);
};

/**
 * It generates a random string of a given length
 * @param [byteLength=32] - The length of the random string in bytes. The default is 32 bytes.
 * @returns A random string of 32 bytes.
 */
export const generateRandomString = (byteLength = 32) => {
    return base64URLEncode(crypto.lib.WordArray.random(byteLength));
};

/**
 * It generates a random string, hashes it, and then encodes it in a way that's safe to use in a URL
 * @returns An object with three properties: state, codeVerifier, and codeChallenge.
 */
export const generateChallenge = () => {
    const state = generateRandomString();
    const codeVerifier = generateRandomString();
    const codeChallenge = base64URLEncode(sha256(codeVerifier));
    return {
        state,
        codeVerifier,
        codeChallenge
    };
};

/**
 * "If the reference is null or undefined, throw a PropertyRequiredException, otherwise return the
 * reference."
 *
 * The function is a bit more complicated than that, but that's the gist of it
 * @param reference - The reference to check.
 * @param name - The name of the property that is required.
 * @returns The reference itself.
 */
export const checkNotNull = (reference, name) => {
    if (reference === null || reference === undefined) {
        throw new PropertyRequiredException(name);
    }
    return reference;
};

const AdditionalParametersAllow = {
    audience: 'string',
    is_create_org: 'boolean',
    org_code: 'string',
    org_name: 'string'
};

/**
 * It checks if the additional parameters are valid
 * @param additionalParameters - This is an object that contains additional parameters that you want to
 * pass to the API.
 * @returns the additionalParameters object if it exists.
 */
export const checkAdditionalParameters = (additionalParameters) => {
    if (typeof additionalParameters !== 'object') {
        throw new UnexpectedException('additionalParameters');
    }
    const keyExists = Object.keys(additionalParameters);
    if (keyExists.length) {
        const keysAllow = Object.keys(AdditionalParametersAllow);
        for (key of keyExists) {
            if (!keysAllow.includes(key)) {
                throw new UnexpectedException(key);
            }
            if (
                typeof additionalParameters[key] !==
                AdditionalParametersAllow[key]
            ) {
                throw new InvalidTypeException(
                    key,
                    AdditionalParametersAllow[key]
                );
            }
        }
        return additionalParameters;
    }
    return {};
};

/**
 * It takes two objects as arguments, and adds the properties of the second object to the first object
 * @param target - The target object that you want to add the additional parameters to.
 * @param additionalParameters - This is the object that contains the additional parameters that you
 * want to add to the target object.
 * @returns the target object with the additional parameters added to it.
 */
export const addAdditionalParameters = (target, additionalParameters) => {
    const newAdditionalParameters =
        checkAdditionalParameters(additionalParameters);
    const keyExists = Object.keys(newAdditionalParameters);
    if (keyExists.length) {
        keyExists.forEach((key) => {
            target[key] = newAdditionalParameters[key];
        });
    }
    return target;
};

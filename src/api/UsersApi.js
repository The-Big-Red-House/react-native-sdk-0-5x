/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateUser200Response from '../model/CreateUser200Response';
import CreateUserRequest from '../model/CreateUserRequest';
import User from '../model/User';

/**
 * Users service.
 * @module api/UsersApi
 * @version 0.0.1
 */
export default class UsersApi {
    /**
     * Constructs a new UsersApi.
     * @alias module:api/UsersApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/UsersApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a user record
     * Creates a user record and optionally zero or more identities for the user. An example identity could be the email address of the user
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateUserRequest} opts.createUserRequest The details of the user to create
     * @param {module:api/UsersApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUser200Response}
     */
    createUser(opts, callback) {
        opts = opts || {};
        let postBody = opts['createUserRequest'];

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['kindeBearerAuth'];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = CreateUser200Response;
        return this.apiClient.callApi(
            '/user',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            null,
            callback
        );
    }

    /**
     * Callback function to receive the result of the getUsers operation.
     * @callback module:api/UsersApi~getUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of end-user records for a business
     * The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the page_size query string parameter.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort Describes the field and order to sort the result by
     * @param {Number} opts.pageSize The number of items to return
     * @param {Number} opts.userId The id of the user to filter by
     * @param {String} opts.nextToken A string to get the next page of results if there are more results
     * @param {module:api/UsersApi~getUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    getUsers(opts, callback) {
        opts = opts || {};
        let postBody = null;

        let pathParams = {};
        let queryParams = {
            sort: opts['sort'],
            page_size: opts['pageSize'],
            user_id: opts['userId'],
            next_token: opts['nextToken']
        };
        let headerParams = {};
        let formParams = {};

        let authNames = ['kindeBearerAuth'];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = [User];
        return this.apiClient.callApi(
            '/users',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            null,
            callback
        );
    }
}
